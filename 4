// 4. Implement a class LinkedList
// Create Node
// pushBack
// PopBack
// PushFront
// PopFront
// Display
#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:
     int data;
     Node *next;
    public:
        Node(int val)
        {
            data = val;
            next = nullptr;
        };
};

class Linkedlist
{
    private:
      Node *head;
    public:
        Linkedlist()
        {
            head=nullptr;
        }
        void pushBack(int val)
        {
            Node *newnode = new Node(val);
            if(head == nullptr)
            {
                head=newnode;
            }
            else
            {
                Node *temp = head;
                while(temp->next != nullptr)
                {
                    temp=temp->next;
                }
                temp->next=newnode;
            }
        }
        void PopBack()
        {
            if(head == nullptr)
            {
                cout<<"Nothing to delete\n";
                return;
            }
            else if(head->next == nullptr)
                {
                    delete head;
                    head = nullptr;
                    return;
                }
            
            Node *temp = head;
            while(temp->next->next!=nullptr)
            {
                temp=temp->next;
            }
           
            delete  temp->next;
            temp->next=nullptr;
        }
       
        void display()
        {
            Node*temp = head;
            while(temp!=nullptr)
            {
                cout<<temp->data<<" -> ";
                temp=temp->next;
            }
            cout<<"NULL"<<endl;
        }
        void PushFront(int val)
        {
            Node *newnode = new Node(val);
            if(head == nullptr)
            {
                head = newnode;
            }
            else
            {
                newnode->next = head;
                head=newnode;
            }
        }
        void PopFront()
        {
            if(head == nullptr)
            {
                cout<<"Empty Linkedlist. not present element to delete\n";
                return;
            }
            else if(head->next == nullptr)
                {
                    delete head;
                    head = nullptr;
                    return;
                }
            else
            {
                Node *temp=head;
                head=head->next;
                delete temp;
            }
        }
       
       
       
       
};
int main()
{
    Linkedlist list;
    list.pushBack(5);
    list.PushFront(8);
    
    list.PushFront(10);
    
    list.display();
    list.PopFront();
    list.PopBack();
    list.display();
    
}